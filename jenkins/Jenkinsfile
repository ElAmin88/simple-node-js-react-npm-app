pipeline{
	agent {
		kubernetes {
            defaultContainer 'jnlp'
            yamlFile 'build.yaml'
        }
	}
	stages{
		
		/* stage("SonarQube"){
			steps{
				nodejs(nodeJSInstallationName:'nodejs'){	
				sh "npm install"
				sh "npm run build"
					script {
					
					withSonarQubeEnv("test-npm") {
					sh "${tool("sonarqube-container")}/bin/sonar-scanner \
					-Dsonar.projectKey=test-npm  \
					-Dsonar.sources=. \
					-Dsonar.css.node=. \
					-Dsonar.host.url=http://129.151.158.98:9000  \
					-Dsonar.login=41986a4b64f343f848e8ecd65dbfabd6d12b0b62"
						}
					}
				}
			}
		}
 */
		stage("Image Build and Push "){
			steps {
				container('podman') {
					sh  "podman build ./nodejs -t elamin88/node-test"			
					withCredentials([usernamePassword(credentialsId: "dockerhub-amin",
													usernameVariable: 'USERNAME',
													passwordVariable: 'PASSWORD')]) {
						sh "podman login -u ${USERNAME} -p ${PASSWORD} docker.io --tls-verify=false"
						sh "podman push elamin88/node-test --tls-verify=false"
					}
				}
			}
		}


		stage("Helm"){
			steps {
				container('helm') {
						sh "helm -n abdo upgrade --install nodejs ./chart"
				}
			}
		}
	}
}
